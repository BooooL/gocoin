Global:
* Add suport for multisig segwit

Lib:
* Check implemetation against this: https://bitslog.wordpress.com/2017/01/08/a-bitcoin-transaction-that-takes-5-hours-to-verify/
* Try to make own (faster) implementation of sha256 and rimp160

Client:
* Mempool: Implement proper expiring of orphan txs and limit their total size
	/** Default for -maxorphantx, maximum number of orphan transactions kept in memory */
	static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;
	/** Expiration time for orphan transactions in seconds */
	static const int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;
	/** Minimum time between orphan transactions expire time checks in seconds */
	static const int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;

... better idea:
	Combine it with the cache for (some of the) rejected transations (e.g. low fee, RBF replaced, RBF final, no utxo)
	All the txs that you see mined after, but which are in the rejected list

* Force to create UTXO.db file once for awhile (when bootstraping)
* Review and update WebUI's Help page
* Monitor: at slow connections it gets stuck (new blocks stop being downloaded). Go to standby and come back.
* Optionally use utils.GetBlockFromWeb() for initial blockchain download
* Figure out a way to purge blocks that we got good headers for, but never managed to download the txs
* WebUI to offer switching to "-trust -nowallet" mode while downloading many blocks.
* Update mining API

Wallet:
* Implement "server mode", e.g. through TCP or serial connection
* Write more automated tests

Probably not to do:
* Do not list unmatured coinbase outputs in the balance
* Implement "mempool" network command

Tools:
* txaddsig - make it to work with multisig and segwit
